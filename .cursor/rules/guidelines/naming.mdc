---
description: When creating or updating files and folder
globs:
alwaysApply: false
---
# Naming Guidelines

This rule establishes consistent naming conventions for files and folders throughout the repository.

## Table of Contents

- @File Naming Rules
- @Folder Naming Rules
- @Special Cases and Exceptions
- @Migration Guidelines
- @Enforcement

## File Naming Rules

### Primary Rule: Use kebab-case for All Files
- **All file names must use kebab-case format (lowercase with hyphens)**
- Examples: `user-profile.tsx`, `loading-button.tsx`, `copy-button.stories.tsx`
- This applies to all file types: `.tsx`, `.ts`, `.js`, `.jsx`, `.css`, `.scss`, `.md`, `.mdx`, etc.

### File Type Extensions
- **React Components**: `.tsx` (TypeScript React)
- **TypeScript Files**: `.ts` (utilities, types, etc.)
- **JavaScript Files**: `.js` (JavaScript)
- **CSS Files**: `.css` (stylesheets)
- **Storybook Stories**: `.stories.tsx`
- **Test Files**: `.test.tsx` or `.spec.ts`
- **Documentation**: `.mdx` (for component docs), `.md` (for general docs)

### Examples of Correct File Names

```
user-profile.tsx
loading-button.tsx
copy-button.stories.tsx
button.test.tsx
validate-props.ts
is-icon-only.ts
index.ts
types.ts
tailwind.css
changelog.mdx
overview.mdx
```

### Examples of Incorrect File Names

```
UserProfile.tsx
userProfile.tsx
user_profile.tsx
button_group.stories.tsx
form1.tsx
service.ts
```

## Folder Naming Rules

### All Folders: kebab-case
- **All folders should use kebab-case format (lowercase with hyphens)**
- This includes component folders, utility folders, and feature folders
- Examples: `user-profile/`, `loading-button/`, `tab-panel/`, `utils/`, `testing/`

### Examples of Correct Folder Names

#### Component Folders
```
components/
├── user-profile/
├── navigation-bar/
├── form-elements/
└── data-table/
```

#### Feature Folders
```
features/
├── authentication/
├── user-management/
├── payment-processing/
└── dashboard/
```

#### Utility Folders
```
utils/
├── formatters/
├── validators/
├── api-helpers/
└── constants/
```

### Examples of Incorrect Folder Names

```
UserProfile/
userProfile/
user_profile/
navigationBar/
form_elements/
DataTable/
```

## Special Cases and Exceptions

### Configuration Files
- **Configuration files can be named in anyway** as per their ecosystem standards
- Examples: `.markdownlint-cli2.jsonc`, `pnpm-workspace.yaml`, `commitlint.config.js`

### Build Output Directories
- **Build output directories are ignored from naming conventions**
- These directories use their standard names as required by build tools
- Examples: `cjs/`, `esm/`, `dist/`, `build/`, `coverage/`
- Files and folders within these directories are generated and should not be manually named

### Package Names
- **Package names in package.json can use kebab-case** as per npm conventions
- Examples: `just-web`, `storybook-addon-vis`

### Index Files
- Use `index.ts` or `index.tsx` for barrel exports
- Place in the root of feature/module folder

### Type Definition Files
- Use `.d.ts` extension
- Match the name of the file they extend
- Example: `api-client.d.ts`

### Asset Files
- Use kebab-case
- Include size/resolution in the name if relevant
- Example: `logo-dark.svg`, `hero-image-2x.png`

## Migration Guidelines

### When Creating New Files
1. Always use kebab-case for new file names
2. Always use kebab-case for new folder names (including component folders)
3. Follow the established patterns in the directory you're working in

### When Refactoring Existing Files
1. Gradually migrate existing files to kebab-case
2. Update imports and references accordingly
3. Maintain backward compatibility during transition

## Enforcement

### Linting Rules

- Configure ESLint/Biome to enforce kebab-case for file names
- Use file naming linting rules where available

### Code Review Checklist

- [ ] File names follow kebab-case convention
- [ ] Folder names follow kebab-case convention (including component folders)
- [ ] File extensions are correct for the content type
- [ ] Imports and references are updated if file names changed

### Common Mistakes to Avoid

1. ❌ Using PascalCase: `UserProfile/` instead of `user-profile/`
2. ❌ Using camelCase: `userProfile/` instead of `user-profile/`
3. ❌ Using snake_case: `user_profile/` instead of `user-profile/`
4. ❌ Using uppercase: `COMPONENTS/` instead of `components/`
5. ❌ Using spaces: `user profile/` instead of `user-profile/`
6. ❌ Using special characters: `user@profile/` or `user.profile/` instead of `user-profile/`

## Integration with Other Rules

This rule works in conjunction with:

- @Cursor Rules - For maintaining rule file naming conventions
- @Commit Message Guidelines - For consistent commit message formatting

---
description: Use when writing or editing any markdown content including documentation files (.md, .mdx), Cursor rules (.mdc), JSDoc comments, README files, or any other markdown-formatted content. Essential for ensuring consistent formatting, accessibility compliance, and proper link syntax across all markdown files in the project.
globs:
alwaysApply: false
---
# Markdown Guidelines

This rule provides comprehensive guidelines for writing markdown content that follows best practices and passes markdown linting in this project.

## Table of Contents

- [Quick Reference](mdc:#quick-reference)
- [Configuration](mdc:#markdown-linting-configuration)
- [General Best Practices](mdc:#general-markdown-best-practices)
- [Cursor Rule Files](mdc:#cursor-rule-files)
- [Language Identifiers](mdc:#language-identifiers)
- [Common Mistakes](mdc:#common-mistakes)
- [Quality Checklist](mdc:#quality-checklist)

## Quick Reference

| Element              | Syntax           | Example               |
|----------------------|------------------|-----------------------|
| **Bold**             | `**text**`       | `**important**`       |
| *Italic*             | `*text*`         | `*emphasis*`          |
| `Code`               | `` `code` ``     | `` `function()` ``    |
| [Link](mdc:#links)                | `[text](mdc:url)`          | `[Docs](mdc:docs.md)`               |
| ![Image](mdc:#images)              | `![alt](mdc:src)`          | `![Logo](mdc:logo.png)`              |
| List                 | `- item`         | `- First item`        |
| Code Block           | ` ```lang`       | ` ```tsx`             |

## Markdown Linting Configuration

The project uses `markdownlint` with the following configuration:

- **Line length**: Disabled (no strict character limits)
- **Inline HTML**: Allowed (can use HTML when needed)
- **Heading start left**: Disabled (headings can be indented)
- **Duplicate headings**: Disabled (can have same heading text in different sections)

Reference: [`.markdownlint-cli2.jsonc`](mdc:.markdownlint-cli2.jsonc)

## General Markdown Best Practices

### Headings

- Use `#` for main title (h1)
- Use `##` for section headings (h2)
- Use `###` for subsection headings (h3)
- Use `####` for sub-subsection headings (h4)
- Avoid using more than 4 levels of headings
- Leave one blank line before and after headings
- Always include space after `#` characters

```md
# Main Title

## Section Heading

### Subsection Heading

#### Sub-subsection Heading
```

### Text Formatting

- Use **bold** for emphasis: `**text**`
- Use *italic* for secondary emphasis: `*text*`
- Use `code` for inline code: `` `code` ``
- Use ~~`strikethrough`~~ for deprecated content: `~~text~~`
- Don't overuse formatting - keep it meaningful

### Lists

- Use `-` for unordered lists (consistent throughout project)
- Use `1.` for ordered lists
- Indent sub-items with 2 spaces
- Leave blank line before and after lists
- Include space after bullet points and numbers
- **End list entries with a period when they are complete sentences**

```md
- First item
- Second item
  - Sub-item
  - Another sub-item
- Third item

1. First step
2. Second step
   1. Sub-step
   2. Another sub-step
3. Third step
```

**Examples of proper list formatting:**

```md
- Use descriptive link text that explains the destination.
- Include title attribute for accessibility when helpful.
- Avoid generic text like "click here" or "read more".

- Component name
- File path
- Configuration option
```

### Links

- Use descriptive link text that explains the destination
- Include title attribute for accessibility when helpful
- Avoid generic text like "click here" or "read more"

### Images

- Always include alt text for accessibility
- Use descriptive alt text that explains the image content
- Include title attribute when helpful
- Keep alt text concise but informative

```md
![Dashboard screenshot](mdc:dashboard.png)
![Component preview](mdc:component.png "Interactive component demonstration")
```

### Code Blocks

**Requirements:**
- **Always include the language identifier** in code blocks for proper syntax highlighting
- **Prefer shorter language identifiers** over longer ones for consistency and brevity
- Use appropriate language identifiers for different file types and commands

**Examples of Correct Usage:**

```sh
pnpm add package
```

```tsx
export const Component = () => {
  return <div>Hello World</div>
}
```

```ts
function example() {
  return 'hello world'
}
```

**Guidelines:**
1. Always specify the language identifier after the opening triple backticks
2. Use the shortest appropriate identifier when multiple options exist
3. Ensure the language identifier accurately represents the content
4. Apply this rule to all code blocks in documentation, comments, and any markdown content

### Blockquotes

- Use `>` for blockquotes
- Leave blank line before and after
- Include space after `>` character

### Tables

- Use proper table formatting with headers
- Align columns appropriately using `|---|` for left alignment
- Keep tables simple and readable
- Include proper spacing for readability

```md
| Header 1 | Header 2 | Header 3 |
|----------|----------|----------|
| Cell 1   | Cell 2   | Cell 3   |
| Cell 4   | Cell 5   | Cell 6   |
```



## Cursor Rule Files

- Use `mdc:` prefix ONLY for local files that should be easily accessible when applying the rule
- Examples: templates, other rules, config files
- Use standard Markdown syntax for external URLs
- Include integration section at the bottom
- Follow the same Markdown standards as other files

**When to use `mdc:` prefix:**
```md
[Other Rule](mdc:.cursor/rules/other-rule.mdc)
[Template](mdc:.cursor/templates/example.md)
[Config File](mdc:package.json)
```

**When to use standard links:**
```md
[External Site](mdc:https:/example.com)
[Documentation](mdc:docs/README.md)
```

## Language Identifiers

Use these shorter identifiers for consistency:

| Language           | Identifier | Notes                                                   |
| :----------------- | :--------- | :------------------------------------------------------ |
| Shell commands     | `sh`       | Preferred over `bash` for cross-platform compatibility. |
| TypeScript React   | `tsx`      | For React components with TypeScript.                   |
| TypeScript         | `ts`       | Preferred over `typescript` for brevity.                |
| JavaScript         | `js`       | Preferred over `javascript` for consistency.            |
| JSON with comments | `jsonc`    | Preferred over `json` when comments are needed.         |
| Markdown           | `md`       | Preferred over `markdown` for brevity.                  |

## Common Mistakes

Key areas to watch:

- **Heading spacing**: Always include space after `#`
- **Link text**: Use descriptive text, not "click here"
- **Code blocks**: Always specify language
- **List formatting**: Consistent bullet style and spacing
- **Link syntax**: Use `mdc:` only for Cursor rule files
- **Table formatting**: Proper alignment and spacing

## Quality Checklist

Before submitting markdown content, ensure:

- [ ] All headings follow proper hierarchy (h1 → h2 → h3 → h4)
- [ ] Code blocks have language identifiers
- [ ] Links have descriptive text
- [ ] Images have meaningful alt text
- [ ] Lists are properly formatted with consistent bullets
- [ ] Tables are aligned correctly
- [ ] Using the shortest appropriate language identifiers
- [ ] Using standard Markdown links for config files, regular Markdown files, and external URLs
- [ ] Proper spacing around headings, lists, and code blocks

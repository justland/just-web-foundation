---
description: Generate changeset (cs)
globs:
alwaysApply: false
---
# Generate Changeset Workflow

This rule provides guidelines for creating changeset files that document changes for package consumers.
Changeset files are used to generate CHANGELOG entries and should focus on user-facing changes.

## When to Apply This Rule

This rule should be applied when:
- Making changes to packages that affect the public API
- Adding new features or components
- Fixing bugs that impact users
- Making breaking changes
- Updating dependencies that affect functionality
- Any change that should be documented in the package's CHANGELOG

## Changeset File Structure

### File Location

Changeset files should be created in the `.changeset/` directory at the repository root.

### File Naming Convention

- **Format**: `[unique-id].md`
- **Example**: `add-css-utilities.md`, `fix-type-definitions.md`
- **Unique ID**: Should be descriptive and unique across all changesets

### File Content Structure

```md
---
"@just-web/css": patch
"@just-web/types": minor
---

[Brief description of the change for consumers]
```

## Change Types

### Major Changes (`major`)

- Breaking changes that require consumer action
- API changes that break existing code
- Removal of deprecated features
- Major version bumps
- Type definition changes that break existing code

### Minor Changes (`minor`)

- New features that are backward compatible
- New components or utilities
- New configuration options
- Performance improvements
- New type definitions or interfaces

### Patch Changes (`patch`)

- Bug fixes
- Dependency updates that don't break compatibility
- Minor type improvements that don't break existing code

## Content Guidelines

### Target Audience

- **Primary**: Package consumers and developers
- **Focus**: What changed and how it affects users
- **Tone**: Clear, concise, and actionable

### What to Include

#### ✅ Include These Changes

- New components or features
- Bug fixes that affect functionality
- Breaking changes and migration steps
- Performance improvements
- Security fixes
- API changes (additions, modifications, removals)
- Configuration changes
- Dependency updates that affect behavior
- New type definitions or interfaces
- CSS utility additions or changes
- Storybook documentation updates that reflect API changes

#### ❌ Do NOT Include These Changes

- Internal refactoring
- Code style changes
- Test-only changes
- Documentation-only changes (unless they fix incorrect information)
- Build process changes
- CI/CD changes
- Development tooling changes
- Storybook-only changes that don't affect the API

### Writing Style

- The message should be proper English. Sentences should end with a period (`.`).
- Code should be wrapped in backticks (`` ` ``).
- Use present tense for new features and past tense for fixes.
- Be specific about what changed and how it affects users.

#### Good Examples

```md
---
"@just-web/css": minor
---

Add new `getCssPropValues` utility for extracting CSS property values from elements.
```

```md
---
"@just-web/types": patch
---

Fix `DataAttributes` type to properly handle optional attributes.
```

```md
---
"@just-web/css": major
---

Remove deprecated `px2rem` function. Use `pxToRem` instead for better naming consistency.
```

#### Bad Examples

```md
---
"@just-web/css": patch
---

Refactor internal component structure
```

```md
---
"@just-web/types": patch
---

Update test coverage
```

```md
---
"@just-web/css": patch
---

Fix linting errors
```

## Multi-Package Changes

When changes affect multiple packages, list all affected packages:

```md
---
"@just-web/css": minor
"@just-web/types": patch
---

Add new CSS property utilities and corresponding TypeScript types.
```

## Breaking Changes

For breaking changes, provide clear migration guidance:

```md
---
"@just-web/css": major
---

Remove deprecated `px2rem` function. Use `pxToRem` instead for better naming consistency.

Migration:
- Replace `px2rem(16)` with `pxToRem(16)`
- Replace `px2rem(24)` with `pxToRem(24)`
```

## Implementation Process

### 1. Create Changeset File

```bash
# Create a new changeset file
touch .changeset/[descriptive-name].md
```

### 2. Write Content

- Use the appropriate change type
- Write clear, consumer-focused description
- Include migration steps for breaking changes

### 3. Review Changeset

- Ensure it targets package consumers
- Verify the change type is appropriate
- Check that all affected packages are listed

## Package-Specific Considerations

### CSS Package (`@just-web/css`)

- Focus on CSS utility function changes
- Document new utility functions or converters
- Note changes to existing function signatures
- Include performance improvements
- Document new CSS property utilities
- Note changes to theme or styling utilities

### Types Package (`@just-web/types`)

- Document new type definitions or interfaces
- Note changes to existing type signatures
- Include improvements to type safety
- Document new data attribute types
- Note changes to common type utilities

## Integration with Release Process

### Changeset Commands

```bash
# Add a new changeset (interactive)
pnpm changeset

# Generate changelog from changesets
pnpm changeset version

# Publish packages with changesets
pnpm changeset publish
```

## Best Practices

### Descriptive Names

- Use clear, descriptive names for changeset files
- Include the component or feature name
- Use kebab-case for file names

### Single Responsibility

- Each changeset should cover one logical change
- Don't combine unrelated changes in one changeset
- Create separate changesets for different packages

### Consumer Focus

- Always think about how the change affects users
- Write descriptions that help users understand the impact
- Provide clear migration steps when needed

### Consistency

- Use consistent terminology across changesets
- Follow the same format for similar types of changes
- Maintain consistent change type usage

## Examples by Package Type

### CSS Package

```md
---
"@just-web/css": minor
---

Add new `remToPx` converter utility for converting rem values to pixels.
```

### Types Package

```md
---
"@just-web/types": patch
---

Add new `FormDataAttributes` type for form-related data attributes.
```

### Multi-Package Example

```md
---
"@just-web/css": minor
"@just-web/types": minor
---

Add new color scheme utilities and corresponding TypeScript types for dark/light mode support.
```

## Common Scenarios

### Adding New Utilities

```md
---
"@just-web/css": minor
---

Add `getCssPropValues` utility for extracting multiple CSS property values from elements.
```

### Fixing Type Issues

```md
---
"@just-web/types": patch
---

Fix `DataAttributes` interface to properly handle nested object types.
```

### Breaking API Changes

```md
---
"@just-web/css": major
---

Rename `px2rem` to `pxToRem` for better naming consistency. The old function is deprecated.

Migration:
- Replace `px2rem(value)` with `pxToRem(value)`
- Update imports from `px2rem` to `pxToRem`
```

### Performance Improvements

```md
---
"@just-web/css": patch
---

Improve performance of `getCssPropValues` function by 30% for large element collections.
```

This rule ensures that all changes are properly documented for package consumers and that the changelog provides clear, actionable information about what changed and how it affects users.
```

This rule ensures that all changes are properly documented for package consumers and that the changelog provides clear, actionable information about what changed and how it affects users.
